<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/supabase/src/app/supabaseService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supabase/src/app/supabaseService.ts" />
              <option name="originalContent" value="import { Injectable, signal } from '@angular/core';&#10;import { createClient, SupabaseClient, RealtimeChannel } from '@supabase/supabase-js';&#10;import { SUPABASE_URL, SUPABASE_ANON_KEY } from './core/supabase.config';&#10;&#10;@Injectable({ providedIn: 'root' })&#10;&#10;export class SupabaseApiService {&#10;  private client: SupabaseClient;&#10;  private channel: RealtimeChannel;&#10;&#10;  // Signal hält die aktuelle Tabelle&#10;  folderList = signal&lt;any[]&gt;([]);&#10;&#10;  constructor() {&#10;    this.client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);&#10;&#10;    // Initialdaten laden&#10;    this.refreshFolderList();&#10;&#10;    // Realtime-Channel aufsetzen&#10;    this.channel = this.client.channel('custom-insert-channel')&#10;      .on(&#10;        'postgres_changes',&#10;        { event: 'INSERT', schema: 'public', table: 'folders' },&#10;        (payload: any) =&gt; {&#10;          console.log('Change received!', payload);&#10;          this.refreshFolderList(); // Aktualisiere die Liste bei Änderungen&#10;        }&#10;      )&#10;      .subscribe((status) =&gt; {&#10;        if (status === 'SUBSCRIBED') {&#10;          console.log('Realtime subscription established successfully.');&#10;        } else {&#10;          console.error('Failed to establish subscription:', status);&#10;        }&#10;      });&#10;  }&#10;&#10;  // Holt aktuelle Tabelle&#10;  async refreshFolderList() {&#10;    const { data, error } = await this.client&#10;      .from('folder')&#10;      .select('*')&#10;      .order('id', { ascending: true }); // oder nach created_at, je nach Tabelle&#10;&#10;    if (error) {&#10;      console.error('Fehler beim Laden der Folder:', error);&#10;      return;&#10;    }&#10;    this.folderList.set(data ?? []);&#10;  }&#10;&#10;  // Channel aufräumen (optional bei AppDestroy)&#10;  disconnect() {&#10;    if (this.channel) {&#10;      this.client.removeChannel(this.channel);&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable, signal } from '@angular/core';&#10;import { createClient, SupabaseClient, RealtimeChannel } from '@supabase/supabase-js';&#10;import { SUPABASE_URL, SUPABASE_ANON_KEY } from './core/supabase.config';&#10;&#10;@Injectable({ providedIn: 'root' })&#10;&#10;export class SupabaseApiService {&#10;  private client: SupabaseClient;&#10;  private channel: RealtimeChannel;&#10;&#10;  // Signal hält die aktuelle Tabelle&#10;  folderList = signal&lt;any[]&gt;([]);&#10;&#10;  constructor() {&#10;    this.client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);&#10;&#10;    // Initialdaten laden&#10;    this.refreshFolderList();&#10;&#10;    // Realtime-Channel aufsetzen&#10;    this.channel = this.client.channel('custom-insert-channel')&#10;      .on(&#10;        'postgres_changes',&#10;        { event: 'INSERT', schema: 'public', table: 'folders' },&#10;        (payload: any) =&gt; {&#10;          console.log('Change received!', payload);&#10;          this.refreshFolderList(); // Aktualisiere die Liste bei Änderungen&#10;        }&#10;      )&#10;      .subscribe((status) =&gt; {&#10;        if (status === 'SUBSCRIBED') {&#10;          console.log('Realtime subscription established successfully.');&#10;        } else {&#10;          console.error('Failed to establish subscription:', status);&#10;        }&#10;      });&#10;  }&#10;&#10;  // Holt aktuelle Tabelle&#10;  async refreshFolderList() {&#10;    const { data, error } = await this.client&#10;      .from('folders') // Tabellenname korrigiert&#10;      .select('*')&#10;      .order('id', { ascending: true }); // oder nach created_at, je nach Tabelle&#10;&#10;    if (error) {&#10;      console.error('Fehler beim Laden der Folder:', error);&#10;      return;&#10;    }&#10;    this.folderList.set(data ?? []);&#10;  }&#10;&#10;  // Channel aufräumen (optional bei AppDestroy)&#10;  disconnect() {&#10;    if (this.channel) {&#10;      this.client.removeChannel(this.channel);&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>